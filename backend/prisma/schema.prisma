// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  expiresAt DateTime
  data      String
}

model User {
  id       String   @id @default(uuid())
  fullName String
  email    String   @unique
  password String
  fridge   Fridge?
  recipes  Recipe[]
}

model Fridge {
  id          String       @id @default(uuid())
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id])
  ingredients Ingredient[]
}

enum IngredientMeasurement {
  discrete // defaults to number
  volume // defaults to mL
  weight // defaults to grams
}

// Server generate instances of ingredients
model IngredientType {
  id                  String       @id @default(uuid())
  name                String       @unique
  ingredientInstances Ingredient[]

  measurementType IngredientMeasurement
}

model MeasurementUnit {
  id              String                @id @default(uuid())
  measurementType IngredientMeasurement
  unitName        String                @unique
  ingredients     Ingredient[]
}

// Instances of IngredientType stored in the fridge
model Ingredient {
  id                String          @id @default(uuid())
  ingredientTypeId  String
  ingredientType    IngredientType  @relation(fields: [ingredientTypeId], references: [id])
  fridgeId          String?
  fridge            Fridge?         @relation(fields: [fridgeId], references: [id])
  recipeId          String?
  recipe            Recipe?         @relation(fields: [recipeId], references: [id])
  amount            Decimal
  measurementUnitId String
  measurementUnit   MeasurementUnit @relation(fields: [measurementUnitId], references: [id])

  // Every fridge can only list an ingredient type once
  @@unique([ingredientTypeId, fridgeId])
}

model Recipe {
  id           String       @id @default(uuid())
  name         String
  authorId     String
  author       User         @relation(fields: [authorId], references: [id])
  instructions String
  postedDate   DateTime     @default(now())
  ingredients  Ingredient[]
}
